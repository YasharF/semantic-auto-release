name: Start Release

on:
  schedule:
    - cron: "0 0 1 * *"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      temp_branch: ${{ steps.commit_branch.outputs.temp_branch }}
      version: ${{ steps.determine_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: npm ci

      - name: Determine release version
        id: determine_version
        env:
          release_step: create_release_files
        run: |
          npx semantic-release --no-ci --dry-run --extends ./release.config.js
          VERSION=$(cat version.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: node ./scripts/update-packagejson-ver.js ${{ steps.determine_version.outputs.version }}

      - name: Update changelog
        run: node ./scripts/write-changes-md.js ${{ steps.determine_version.outputs.version }} CHANGELOG.md

      - name: Optionally run Prettier on changelog
        run: npx prettier --write CHANGELOG.md

      - name: Commit ephemeral branch
        id: commit_branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          TEMP_BRANCH="temp_release_${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}"
          git checkout -b "$TEMP_BRANCH"
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore(release): ${{ steps.determine_version.outputs.version }}" || echo "No changes to commit"
          git push origin "$TEMP_BRANCH" --force
          echo "temp_branch=$TEMP_BRANCH" >> $GITHUB_OUTPUT

      - name: Trigger PR creation workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const notes = fs.readFileSync('release-notes.txt', 'utf8');
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'create-release-pr',
              client_payload: {
                temp_branch: '${{ steps.commit_branch.outputs.temp_branch }}',
                version: '${{ steps.determine_version.outputs.version }}',
                notes: notes
              }
            })
