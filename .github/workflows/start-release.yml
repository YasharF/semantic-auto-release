name: Start Release

on:
  schedule:
    - cron: "0 0 1 * *"
  workflow_dispatch:

env:
  CHANGELOG_FILE: CHANGES.md

permissions:
  contents: read

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.determine_version.outputs.version }}
      notes: ${{ steps.capture_release_notes.outputs.notes }}
      base_branch: ${{ steps.capture_branch.outputs.base_branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Determine release version
        id: determine_version
        env:
          release_step: create_release_files
        run: |
          npx semantic-release --no-ci --dry-run --extends ./release.config.js
          if [ -f version.txt ]; then
            VERSION=$(cat version.txt)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "No release required; skipping remaining steps." >&2
            echo "version=" >> $GITHUB_OUTPUT
          fi

      - name: Capture release notes
        id: capture_release_notes
        if: steps.determine_version.outputs.version != ''
        run: |
          NOTES=$(cat release-notes.txt)
          printf 'notes<<EOF\n%s\nEOF\n' "$NOTES" >> $GITHUB_OUTPUT

      - name: Capture base branch
        id: capture_branch
        if: steps.determine_version.outputs.version != ''
        run: |
          BASE_BRANCH=$(cat branch.txt)
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT

  stage-release:
    runs-on: ubuntu-latest
    needs: prepare-release
    if: needs.prepare-release.outputs.version != ''
    permissions:
      contents: write
    outputs:
      temp_branch: ${{ steps.commit_branch.outputs.temp_branch }}
      notes: ${{ steps.collect_notes.outputs.notes }}
      commit_sha: ${{ steps.commit_branch.outputs.commit_sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Restore release notes file
        run: |
          printf '%s' "${{ needs.prepare-release.outputs.notes }}" > release-notes.txt

      - name: Update package.json version
        run: node ./scripts/update-packagejson-ver.js ${{ needs.prepare-release.outputs.version }}

      - name: Update changelog
        run: node ./scripts/write-changes-md.js ${{ needs.prepare-release.outputs.version }} "${{ env.CHANGELOG_FILE }}"

      - name: Optionally run Prettier on changelog
        run: npx prettier --write "${{ env.CHANGELOG_FILE }}"

      - name: Collect release notes
        id: collect_notes
        run: |
          NOTES=$(cat release-notes.txt)
          printf 'notes<<EOF\n%s\nEOF\n' "$NOTES" >> $GITHUB_OUTPUT

      - name: Commit ephemeral branch
        id: commit_branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          TEMP_BRANCH="temp_release_${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}"
          git checkout -b "$TEMP_BRANCH"
          git add package.json package-lock.json "${{ env.CHANGELOG_FILE }}"
          git commit -m "chore(release): ${{ needs.prepare-release.outputs.version }}" || echo "No changes to commit"
          git push origin "$TEMP_BRANCH" --force
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "temp_branch=$TEMP_BRANCH" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

  release-checks:
    name: Checks
    needs: [prepare-release, stage-release]
    if: needs.prepare-release.outputs.version != ''
    uses: ./.github/workflows/checks.yml
    with:
      ref: ${{ needs.stage-release.outputs.temp_branch }}

  release-status:
    needs: [prepare-release, stage-release, release-checks]
    if: needs.prepare-release.outputs.version != ''
    runs-on: ubuntu-latest
    permissions:
      statuses: write
    steps:
      - name: Publish required statuses
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const sha = '${{ needs.stage-release.outputs.commit_sha }}';
            const statuses = [
              { context: 'Checks / Build & Commit Checks', description: 'succeeded' },
              { context: 'Checks / PR Title Check', description: 'succeeded' }
            ];
            for (const status of statuses) {
              await github.rest.repos.createCommitStatus({
                owner,
                repo,
                sha,
                state: 'success',
                context: status.context,
                description: status.description
              });
            }

  create-pr:
    needs: [prepare-release, stage-release, release-status]
    if: needs.prepare-release.outputs.version != ''
    runs-on: ubuntu-latest
    outputs:
      pr_url: ${{ steps.create.outputs.pr_url }}
      pr_number: ${{ steps.create.outputs.pr_number }}
    env:
      NOTES: ${{ needs.stage-release.outputs.notes }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create PR
        id: create
        run: |
          PR_URL=$(gh pr create \
            --base ${{ needs.prepare-release.outputs.base_branch }} \
            --head ${{ needs.stage-release.outputs.temp_branch }} \
            --title "chore(release): ${{ needs.prepare-release.outputs.version }}" \
            --body "$NOTES")
          PR_NUMBER=$(gh pr view "$PR_URL" --json number --jq '.number')
          echo "Created $PR_URL"
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

      - name: Wait for PR registration
        run: sleep 15

      - name: Merge PR (auto when needed)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e
          gh pr merge ${{ steps.create.outputs.pr_number }} \
            --repo "$GITHUB_REPOSITORY" \
            --squash --auto
          rc=$?
          set -e
          if [ $rc -ne 0 ]; then
            echo "Auto-merge could not be enabled; attempting to merge."
            gh pr merge ${{ steps.create.outputs.pr_number }} \
              --repo "$GITHUB_REPOSITORY" \
              --squash --delete-branch
          fi

  publish:
    needs: [prepare-release, stage-release, release-status, create-pr]
    if: needs.prepare-release.outputs.version != ''
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.prepare-release.outputs.version }}
      NOTES: ${{ needs.stage-release.outputs.notes }}
    permissions:
      contents: write
      packages: write
      id-token: write
      pull-requests: read
    steps:
      - name: Wait for PR to merge (in case auto-merge needs time)
        id: await_merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for attempt in {1..60}; do
            data=$(gh pr view ${{ needs.create-pr.outputs.pr_number }} \
              --repo "$GITHUB_REPOSITORY" \
              --json state,mergeCommit \
              --jq '{state: .state, sha: .mergeCommit.oid}')
            state=$(echo "$data" | jq -r '.state')
            sha=$(echo "$data" | jq -r '.sha')
            if [ "$state" = "MERGED" ] && [ "$sha" != "null" ]; then
              echo "merge_commit=$sha" >> $GITHUB_OUTPUT
              exit 0
            fi
            sleep 10
          done
          echo "PR did not merge within the expected time." >&2
          exit 1

      - name: Checkout merge commit
        uses: actions/checkout@v5
        with:
          ref: ${{ steps.await_merge.outputs.merge_commit }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"
          registry-url: https://registry.npmjs.org/
          cache: npm

      - name: Ensure npm latest
        run: npm install -g npm@latest

      - name: Install dependencies
        run: npm ci

      - name: Run build (if present)
        run: npm run build --if-present

      - name: Publish package via Trusted Publishing
        run: npm publish --provenance --access public

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          printf '%s\n' "$NOTES" > release-notes.out
          gh release create "v$VERSION" \
            --title "v$VERSION" \
            --notes-file release-notes.out
