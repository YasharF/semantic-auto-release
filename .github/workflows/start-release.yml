name: Start Release

on:
  schedule:
    - cron: "0 0 1 * *"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: write
  statuses: write
  packages: write
  id-token: write

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      temp_branch: ${{ steps.commit_branch.outputs.temp_branch }}
      version: ${{ steps.determine_version.outputs.version }}
      notes: ${{ steps.collect_notes.outputs.notes }}
      commit_sha: ${{ steps.commit_branch.outputs.commit_sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: npm ci

      - name: Determine release version
        id: determine_version
        env:
          release_step: create_release_files
        run: |
          npx semantic-release --no-ci --dry-run --extends ./release.config.js
          VERSION=$(cat version.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: node ./scripts/update-packagejson-ver.js ${{ steps.determine_version.outputs.version }}

      - name: Update changelog
        run: node ./scripts/write-changes-md.js ${{ steps.determine_version.outputs.version }} CHANGELOG.md

      - name: Optionally run Prettier on changelog
        run: npx prettier --write CHANGELOG.md

      - name: Collect release notes
        id: collect_notes
        run: |
          NOTES=$(cat release-notes.txt)
          printf 'notes<<EOF\n%s\nEOF\n' "$NOTES" >> $GITHUB_OUTPUT

      - name: Commit ephemeral branch
        id: commit_branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          TEMP_BRANCH="temp_release_${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}"
          git checkout -b "$TEMP_BRANCH"
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore(release): ${{ steps.determine_version.outputs.version }}" || echo "No changes to commit"
          git push origin "$TEMP_BRANCH" --force
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "temp_branch=$TEMP_BRANCH" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

  release-checks:
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout temp branch
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.prepare-release.outputs.temp_branch }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Validate latest commit
        run: npx commitlint --last --verbose

      - name: Prettier check
        run: npm run prettier:check

      - name: Run tests
        run: npm run test:live

      - name: Publish required statuses
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const sha = '${{ needs.prepare-release.outputs.commit_sha }}';
            const statuses = [
              { context: 'Main / build',        description: 'Release checks passed' },
              { context: 'Main / pr_title_check', description: 'Release PR title validated' }
            ];
            for (const status of statuses) {
              await github.rest.repos.createCommitStatus({
                owner,
                repo,
                sha,
                state: 'success',
                context: status.context,
                description: status.description
              });
            }

  create-pr:
    needs: [prepare-release, release-checks]
    runs-on: ubuntu-latest
    outputs:
      pr_url: ${{ steps.create.outputs.pr_url }}
      pr_number: ${{ steps.create.outputs.pr_number }}
    env:
      NOTES: ${{ needs.prepare-release.outputs.notes }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create PR
        id: create
        run: |
          PR_JSON=$(gh pr create \
            --base main \
            --head ${{ needs.prepare-release.outputs.temp_branch }} \
            --title "chore(release): ${{ needs.prepare-release.outputs.version }}" \
            --body "$NOTES" \
            --json number,url)
          PR_NUMBER=$(echo "$PR_JSON" | jq -r '.number')
          PR_URL=$(echo "$PR_JSON" | jq -r '.url')
          echo "Created $PR_URL"
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

      - name: Enable auto-merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge ${{ steps.create.outputs.pr_number }} --squash --auto

  publish:
    needs: [prepare-release, release-checks, create-pr]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.prepare-release.outputs.version }}
      NOTES: ${{ needs.prepare-release.outputs.notes }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Wait for PR to merge
        run: |
          for attempt in {1..60}; do
            data=$(gh pr view ${{ needs.create-pr.outputs.pr_number }} --json state,mergeCommit --jq '{state: .state, sha: .mergeCommit.oid}')
            state=$(echo "$data" | jq -r '.state')
            sha=$(echo "$data" | jq -r '.sha')
            if [ "$state" = "MERGED" ] && [ "$sha" != "null" ]; then
              echo "MERGED_COMMIT=$sha" >> $GITHUB_ENV
              exit 0
            fi
            sleep 10
          done
          echo "PR did not merge within the expected time." >&2
          exit 1

      - name: Checkout merge commit
        uses: actions/checkout@v5
        with:
          ref: ${{ env.MERGED_COMMIT }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Publish package via Trusted Publishing
        run: npm publish --provenance --access public

      - name: Create GitHub Release
        run: |
          printf '%s\n' "$NOTES" > release-notes.out
          gh release create "v$VERSION" \
            --title "v$VERSION" \
            --notes-file release-notes.out
