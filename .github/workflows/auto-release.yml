name: Auto Release

on:
  schedule:
    - cron: "0 0 1 * *" # update this for your release cadence
  workflow_dispatch:

env:
  CHANGELOG_FILE: CHANGES.md
  PRETTIER_CHANGELOG: "true"

  # Increase the retries if you have checks that take longer to run
  # and are not in checks.yml
  PR_MERGE_STATUS_RETRIES: 60 # 10 sec sleep between status pulls

##############################################
##############################################
##############################################
#   Don't make changes below this comment    #
#   Future upgrade scripts may overwrite     #
#   the lines below                          #
##############################################
##############################################
##############################################

concurrency:
  group: auto-release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  evaluate-release:
    name: Evaluate Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.determine_version.outputs.version }}
      notes: ${{ steps.capture_release_notes.outputs.notes }}
      base_branch: ${{ steps.capture_branch.outputs.base_branch }}
      evaluated_sha: ${{ steps.capture_sha.outputs.evaluated_sha }}
      semantic_release_log: ${{ steps.determine_version.outputs.semantic_release_log }}
      changelog_contains_version: ${{ steps.determine_version.outputs.changelog_contains_version }}
      duplicate_version: ${{ steps.determine_version.outputs.duplicate_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Determine release version
        id: determine_version
        env:
          release_step: create_release_files
        run: |
          npx semantic-release --no-ci --dry-run --extends ./release.config.js 2>&1 | tee semantic-release.log
          status=$?
          SEM_REL_LOG=$(cat semantic-release.log)
          printf 'semantic_release_log<<EOF\n%s\nEOF\n' "$SEM_REL_LOG" >> "$GITHUB_OUTPUT"
          if [ $status -ne 0 ]; then
            exit $status
          fi

          echo "changelog_contains_version=false" >> $GITHUB_OUTPUT
          echo "duplicate_version=" >> $GITHUB_OUTPUT

          if [ -f version.txt ]; then
            VERSION=$(cat version.txt)
            check_status=0
            node ./scripts/check-changelog-version.js "$VERSION" "${CHANGELOG_FILE}" || check_status=$?
            if [ "${check_status:-0}" -eq 2 ]; then
              echo "Detected existing changelog entry for $VERSION in ${CHANGELOG_FILE}; skipping release creation."
              echo "changelog_contains_version=true" >> $GITHUB_OUTPUT
              echo "duplicate_version=$VERSION" >> $GITHUB_OUTPUT
              echo "version=" >> $GITHUB_OUTPUT
              exit 0
            elif [ "${check_status:-0}" -ne 0 ]; then
              exit ${check_status}
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "No release required; skipping remaining steps." >&2
            echo "version=" >> $GITHUB_OUTPUT
          fi

      - name: Capture release notes
        id: capture_release_notes
        if: steps.determine_version.outputs.version != ''
        run: |
          NOTES=$(cat release-notes.txt)
          printf 'notes<<EOF\n%s\nEOF\n' "$NOTES" >> $GITHUB_OUTPUT

      - name: Capture base branch
        id: capture_branch
        if: steps.determine_version.outputs.version != ''
        run: |
          BASE_BRANCH=$(cat branch.txt)
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
      - name: Capture evaluated SHA
        id: capture_sha
        run: |
          echo "evaluated_sha=$GITHUB_SHA" >> $GITHUB_OUTPUT

  stage-release:
    name: Prepare Release Branch
    runs-on: ubuntu-latest
    needs: evaluate-release
    if: needs.evaluate-release.outputs.version != ''
    permissions:
      contents: write
    outputs:
      temp_branch: ${{ steps.commit_branch.outputs.temp_branch }}
      notes: ${{ steps.collect_notes.outputs.notes }}
      commit_sha: ${{ steps.commit_branch.outputs.commit_sha }}
    steps:
      - name: Checkout evaluated commit
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.evaluate-release.outputs.evaluated_sha }}

      - name: Install Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Restore release notes file
        run: |
          printf '%s' "${{ needs.evaluate-release.outputs.notes }}" > release-notes.txt

      - name: Update package.json version
        run: node ./scripts/update-packagejson-ver.js ${{ needs.evaluate-release.outputs.version }}

      - name: Update changelog
        run: node ./scripts/write-changes-md.js ${{ needs.evaluate-release.outputs.version }} "${{ env.CHANGELOG_FILE }}"

      - name: Run Prettier on changelog
        if: env.PRETTIER_CHANGELOG == 'true'
        run: npx prettier --write "${{ env.CHANGELOG_FILE }}"

      - name: Collect release notes
        id: collect_notes
        run: |
          NOTES=$(cat release-notes.txt)
          printf 'notes<<EOF\n%s\nEOF\n' "$NOTES" >> $GITHUB_OUTPUT

      - name: Commit ephemeral branch
        id: commit_branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          TEMP_BRANCH="temp_release_${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}"
          git checkout -b "$TEMP_BRANCH"
          git add package.json package-lock.json "${{ env.CHANGELOG_FILE }}"
          git commit -m "chore(release): ${{ needs.evaluate-release.outputs.version }}" || echo "No changes to commit"
          git push origin "$TEMP_BRANCH" --force
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "temp_branch=$TEMP_BRANCH" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

  release-checks:
    name: Checks
    needs: [evaluate-release, stage-release]
    if: needs.evaluate-release.outputs.version != ''
    uses: ./.github/workflows/checks.yml
    with:
      ref: ${{ needs.stage-release.outputs.temp_branch }}

  release-status:
    name: Sync Checks Status
    needs: [evaluate-release, stage-release, release-checks]
    if: needs.evaluate-release.outputs.version != ''
    runs-on: ubuntu-latest
    permissions:
      statuses: write
      checks: read
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Replicate check statuses to the branch for the PR checks
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node ./scripts/sync-check-statuses.js --sha "${{ needs.stage-release.outputs.commit_sha }}"

  create-pr:
    name: Release PR
    needs: [evaluate-release, stage-release, release-status]
    if: needs.evaluate-release.outputs.version != ''
    runs-on: ubuntu-latest
    outputs:
      pr_url: ${{ steps.create.outputs.pr_url }}
      pr_number: ${{ steps.create.outputs.pr_number }}
    env:
      NOTES: ${{ needs.stage-release.outputs.notes }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Create PR
        id: create
        run: |
          PR_URL=$(gh pr create \
            --base ${{ needs.evaluate-release.outputs.base_branch }} \
            --head ${{ needs.stage-release.outputs.temp_branch }} \
            --title "chore(release): ${{ needs.evaluate-release.outputs.version }}" \
            --body "$NOTES")
          PR_NUMBER=$(gh pr view "$PR_URL" --json number --jq '.number')
          echo "Created $PR_URL"
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

      - name: Wait for PR register
        run: sleep 15

      - name: Merge PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e
          gh pr merge ${{ steps.create.outputs.pr_number }} \
            --repo "$GITHUB_REPOSITORY" \
            --squash --auto
          rc=$?
          set -e
          if [ $rc -ne 0 ]; then
            echo "Auto-merge could not be enabled; attempting to merge."
            gh pr merge ${{ steps.create.outputs.pr_number }} \
              --repo "$GITHUB_REPOSITORY" \
              --squash --delete-branch
          fi

      - name: Comment on PR with workflow info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ steps.create.outputs.pr_number }}
          RUN_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          COMMENT_BODY="This PR was generated automatically by the release workflow. [View workflow run]($RUN_URL)"
          gh pr comment "$PR_NUMBER" --body "$COMMENT_BODY"

  publish:
    name: Publish
    needs: [evaluate-release, stage-release, release-status, create-pr]
    if: needs.evaluate-release.outputs.version != ''
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.evaluate-release.outputs.version }}
      NOTES: ${{ needs.stage-release.outputs.notes }}
    permissions:
      contents: write
      packages: write
      id-token: write
      pull-requests: read
    steps:
      - name: Wait for PR to merge (in case auto-merge needs time)
        id: await_merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          retry_limit="${PR_MERGE_RETRY_ATTEMPTS}"
          for attempt in $(seq 1 "$retry_limit"); do
            data=$(gh pr view ${{ needs.create-pr.outputs.pr_number }} \
              --repo "$GITHUB_REPOSITORY" \
              --json state,mergeCommit \
              --jq '{state: .state, sha: .mergeCommit.oid}')
            state=$(echo "$data" | jq -r '.state')
            sha=$(echo "$data" | jq -r '.sha')
            if [ "$state" = "MERGED" ] && [ "$sha" != "null" ]; then
              echo "merge_commit=$sha" >> $GITHUB_OUTPUT
              exit 0
            fi
            sleep 10
          done
          echo "PR did not merge within the expected time." >&2
          exit 1

      - name: Checkout merge commit
        uses: actions/checkout@v5
        with:
          ref: ${{ steps.await_merge.outputs.merge_commit }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"
          registry-url: https://registry.npmjs.org/
          cache: npm

      - name: Ensure npm latest
        run: npm install -g npm@latest

      - name: Install dependencies
        run: npm ci

      - name: Run build (if present)
        run: npm run build --if-present

      - name: Publish package via Trusted Publishing
        run: npm publish --provenance

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          printf '%s\n' "$NOTES" > release-notes.out
          gh release create "v$VERSION" \
            --title "v$VERSION" \
            --notes-file release-notes.out

  final_check:
    name: Error Check
    needs:
      - evaluate-release
      - stage-release
      - release-checks
      - release-status
      - create-pr
      - publish
    if: always()
    runs-on: ubuntu-latest
    env:
      RELEASE_VERSION: ${{ needs.evaluate-release.outputs.version }}
      BASE_BRANCH: ${{ needs.evaluate-release.outputs.base_branch }}
      TEMP_BRANCH: ${{ needs.stage-release.outputs.temp_branch }}
      PR_NUMBER: ${{ needs.create-pr.outputs.pr_number }}
      PR_URL: ${{ needs.create-pr.outputs.pr_url }}
      RELEASE_NOTES: ${{ needs.stage-release.outputs.notes }}
      EVALUATE_RESULT: ${{ needs.evaluate-release.result }}
      STAGE_RESULT: ${{ needs.stage-release.result }}
      CHECKS_RESULT: ${{ needs.release-checks.result }}
      STATUS_RESULT: ${{ needs.release-status.result }}
      CREATE_PR_RESULT: ${{ needs.create-pr.result }}
      PUBLISH_RESULT: ${{ needs.publish.result }}
      SEMANTIC_RELEASE_LOG: ${{ needs.evaluate-release.outputs.semantic_release_log }}
      CHANGELOG_DUPLICATE: ${{ needs.evaluate-release.outputs.changelog_contains_version }}
      DUPLICATE_VERSION: ${{ needs.evaluate-release.outputs.duplicate_version }}
    steps:
      - name: To Do
        run: |
          set -eo pipefail

          if [ -z "$RELEASE_VERSION" ]; then
            if [ "$CHANGELOG_DUPLICATE" = "true" ]; then
              if [ -n "$DUPLICATE_VERSION" ]; then
                echo "${CHANGELOG_FILE} already contains an entry for version $DUPLICATE_VERSION, but no release artifacts were published."
              else
                echo "${CHANGELOG_FILE} already contains the next release entry, but no release artifacts were published."
              fi
              echo "A previous workflow likely merged the changelog without completing the publish step."
              echo "Investigate the last successful release PR and confirm whether npm and GitHub contain version ${DUPLICATE_VERSION:-<unknown>}."
              echo "If they do not, publish that version manually to npm and create the matching GitHub release."
              echo "If they do, remove or adjust the duplicate changelog entry before re-running the workflow."
              if [ -n "$SEMANTIC_RELEASE_LOG" ]; then
                echo
                printf '%s\n' "$SEMANTIC_RELEASE_LOG"
              fi
              exit 1
            fi

            if [ -n "$SEMANTIC_RELEASE_LOG" ]; then
              printf '%s\n' "$SEMANTIC_RELEASE_LOG"
            else
              echo "Semantic-release output was not captured; review the Evaluate Release job logs."
            fi
            exit 0
          fi

          if [ "$PUBLISH_RESULT" = "success" ]; then
            exit 0
          fi

          if [ "$CREATE_PR_RESULT" = "success" ] && [ -n "$PR_NUMBER" ]; then
            echo "The release PR ($PR_URL) merged, but the Publish job did not finish."
            echo
            echo "To finish publishing v$RELEASE_VERSION manually:"
            echo "  1. Ensure your local ${BASE_BRANCH} matches origin/${BASE_BRANCH}:"
            echo "       git checkout ${BASE_BRANCH}"
            echo "       git fetch origin"
            echo "       git reset --hard origin/${BASE_BRANCH}"
            echo "  2. Fetch the merged commit produced by the release PR:"
            echo "       MERGE_SHA=\$(gh pr view $PR_NUMBER --repo \"$GITHUB_REPOSITORY\" --json mergeCommit --jq '.mergeCommit.oid')"
            echo "       git checkout \"\$MERGE_SHA\""
            echo "       (Git will report you're in a 'detached HEAD' state; that's expected while publishing from this commit.)"
            echo "       git status --short"
            echo "  3. Install dependencies and rebuild (if needed):"
            echo "       npm ci"
            echo "       npm run build --if-present"
            echo "  4. Publish the package from the merge commit:"
            echo "       npm publish"
            echo "     If the command exits with an error stating the version already exists, note that the publish already happened and proceed to the next step."
            echo "  5. Create the release notes file and GitHub release:"
            echo "       cat <<'EOF' > release-notes.out"
            if [ -n "$RELEASE_NOTES" ]; then
              printf '%s\n' "$RELEASE_NOTES" | while IFS= read -r line; do printf '       %s\n' "$line"; done
            else
              echo "       # Add release notes content here"
            fi
            echo "       EOF"
            echo
            echo "       gh release create \"v$RELEASE_VERSION\" --title \"v$RELEASE_VERSION\" --notes-file release-notes.out"
            echo
            echo "  6. Switch back to ${BASE_BRANCH} and verify the branch is up to date:"
            echo "       git checkout ${BASE_BRANCH}"
            echo "       git pull"
            if [ -n "$TEMP_BRANCH" ]; then
              echo "  7. Remove the temporary branch from GitHub (fails if it's already gone):"
              echo "       git push origin --delete $TEMP_BRANCH"
              echo "     If the command reports that the branch doesn't exist, it was already deleted."
            fi
            echo
            echo "After confirming npm and the GitHub release are correct, announce the release as usual."
          else
            echo "The automation stopped before the release PR could merge."
            echo "Review the failing job(s):"
            printf '  - Evaluate Release: %s\n' "$EVALUATE_RESULT"
            printf '  - Prepare Release Branch: %s\n' "$STAGE_RESULT"
            printf '  - Checks: %s\n' "$CHECKS_RESULT"
            printf '  - Sync Checks Status: %s\n' "$STATUS_RESULT"
            printf '  - Release PR: %s\n' "$CREATE_PR_RESULT"
            printf '  - Publish: %s\n' "$PUBLISH_RESULT"
            echo
            if [ "$CREATE_PR_RESULT" = "success" ] && [ -n "$PR_NUMBER" ]; then
              echo "An open release PR exists at $PR_URL. Resolve the failing jobs, then close the PR without merging and delete the related temp branch."
            fi
            if [ "$STAGE_RESULT" = "success" ] && [ -n "$TEMP_BRANCH" ]; then
              echo "The temporary branch ($TEMP_BRANCH) is still in the repository. Delete it after your investigation."
            fi
            echo "Once fixes are in place, re-run the auto release workflow."
          fi
