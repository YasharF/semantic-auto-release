name: Semantic Auto Release Engine

on:
  workflow_call:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      packages: write
    env:
      HUSKY: 0

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm

      - name: Install dependencies
        run: npm ci

      # Step 1: Create release files
      - name: Create release files
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        env:
          release_step: create_release_files
        run: |
          set -euo pipefail
          EXPECTED_BRANCH="temp_auto_release_${GITHUB_RUN_NUMBER}_${GITHUB_RUN_ATTEMPT}"

          # Cleanup stale temp branches
          for b in $(git ls-remote --heads origin "temp_auto_release_*" | awk '{print $2}' | sed 's#refs/heads/##'); do
            if [ "$b" != "$EXPECTED_BRANCH" ]; then
              git push origin --delete "$b" || true
            fi
          done

          # Create temp branch from main
          git fetch origin main
          git checkout -b "${EXPECTED_BRANCH}" origin/main

          # Run semantic-release in no-write mode with our export plugin
          npx semantic-release --no-ci --dry-run --extends ./release.config.js

          VERSION=$(cat version.txt)
          NOTES_FILE="notes.md"

          node ./scripts/write-changes-md.js "$VERSION" "$NOTES_FILE"
          node ./scripts/update-version.js "$VERSION"

          git add CHANGES.md package.json package-lock.json
          git commit -m "chore(release): ${VERSION}" || true
          git push --set-upstream origin "${EXPECTED_BRANCH}"

          gh pr create \
            --base main \
            --head "${EXPECTED_BRANCH}" \
            --title "chore(release): ${VERSION}" \
            --body "Automated release bump PR for ${VERSION}."

      # Step 2: Validate and merge release PR
      - name: Validate release PR
        if: >
          github.event_name == 'pull_request' &&
          github.event.pull_request.head.ref == format('temp_auto_release_{0}_{1}', github.run_number, github.run_attempt)
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            if (pr.user.login !== 'github-actions[bot]') {
              core.setFailed(`PR author must be github-actions[bot], got ${pr.user.login}`);
            }
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            const allowed = ['CHANGES.md', 'package.json', 'package-lock.json'];
            for (const f of files.data) {
              if (!allowed.includes(f.filename)) {
                core.setFailed(`Unexpected file changed: ${f.filename}`);
              }
            }

      - name: Merge release PR
        if: >
          github.event_name == 'pull_request' &&
          github.event.pull_request.head.ref == format('temp_auto_release_{0}_{1}', github.run_number, github.run_attempt) &&
          success()
        run: gh pr merge --squash ${{ github.event.pull_request.number }}

      # Step 3: Publish package
      - name: Publish package
        if: >
          github.event_name == 'pull_request' &&
          github.event.action == 'closed' &&
          github.event.pull_request.merged == true &&
          github.event.pull_request.user.login == 'github-actions[bot]' &&
          github.event.pull_request.head.ref == format('temp_auto_release_{0}_{1}', github.run_number, github.run_attempt)
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          set -euo pipefail
          VERSION=$(node -p "require('./package.json').version")

          # Tag in GitHub
          git fetch origin main
          git checkout main
          git pull
          git tag "v${VERSION}"
          git push origin "v${VERSION}"

          # Publish to npm
          npm publish --access public

          # Create GitHub Release
          gh release create "v${VERSION}" \
            --title "v${VERSION}" \
            --notes-file notes.md

      - name: Delete merged temp branch
        if: >
          github.event_name == 'pull_request' &&
          github.event.action == 'closed' &&
          github.event.pull_request.merged == true &&
          github.event.pull_request.user.login == 'github-actions[bot]' &&
          github.event.pull_request.head.ref == format('temp_auto_release_{0}_{1}', github.run_number, github.run_attempt)
        run: |
          gh api -X DELETE "repos/${{ github.repository }}/git/refs/heads/${{ github.event.pull_request.head.ref }}" || true
